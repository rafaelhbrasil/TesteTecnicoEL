using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System.Net;
using System.Threading.Tasks;
using TesteTecncicoEL.Api.Models;
using TesteTecnicoEL.Dominio.Veiculos;
using TesteTecnicoEL.Dominio.Veiculos.Repositorios;

namespace TesteTecncicoEL.Api.Controllers
{
    /// <summary>
    /// Gerenciar veículos, modelos e marcas
    /// </summary>
    [ApiController]
    [Route("[controller]")]
    //[SwaggerTag("This is an example controller generated by ASP.NET Core 2.x")]
    public class VeiculosController : ControllerBase
    {
        private readonly UserIdentity _usuarioAutenticado;
        private readonly IVeiculoRepositorio _veiculoRepositorio;

        public VeiculosController(UserIdentity usuario, IVeiculoRepositorio veiculoRepositorio)
        {
            _usuarioAutenticado = usuario;
            _veiculoRepositorio = veiculoRepositorio;
        }


        /// <summary>
        /// Lista todos os veículos cadastrados no sistema
        /// </summary>
        /// <returns>Uma lista contendo todos os veículos</returns>
        /// <response code="200">Dados listados com sucesso</response>
        [ProducesResponseType(StatusCodes.Status200OK)]
        [HttpGet]
        public async Task<ActionResult<Veiculo>> ListarTodos()
        {
            var marca = await _veiculoRepositorio.Listar();
            if (marca == null)
                return NotFound();
            return Ok(marca);
        }

        /// <summary>
        /// Obtém os detalhes de um veículo
        /// </summary>
        /// <param name="id">O ID do veículo</param>
        /// <returns>Os detalhes do veículo caso seja encontrado</returns>
        /// <response code="200">Veículo encontrado e retornado com sucesso</response>
        /// <response code="404">Veículo não encontrado</response>
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status404NotFound, Type = null)]
        [HttpGet("{id}")]
        public async Task<ActionResult<Veiculo>> ObterPorId(long id)
        {
            var marca = await _veiculoRepositorio.ObterPorId(id);
            if (marca == null)
                return NotFound();
            return Ok(marca);
        }

        /// <summary>
        /// Cria um novo veículo. Somente um operador pode criar veículos.
        /// </summary>
        /// <param name="veiculoDto">Os dados do novo veículo a ser criado</param>
        /// <returns></returns>
        /// <response code="201">O veículo foi criado com sucesso</response>
        /// <response code="400">Dados inválidos. O veículo não será salvo.</response>
        /// <response code="403">Você não tem permissão para criar veículos</response>
        [ProducesResponseType(StatusCodes.Status201Created)]
        [ProducesResponseType(StatusCodes.Status400BadRequest, Type = typeof(string[]))]
        [ProducesResponseType(StatusCodes.Status403Forbidden, Type = null)]
        [HttpPost]
        public async Task<ActionResult> Criar(VeiculoDto veiculoDto)
        {
            if (!_usuarioAutenticado.EhOperador)
                return StatusCode((int)HttpStatusCode.Forbidden);
            var veiculo = new Veiculo(veiculoDto.Placa,
                                      veiculoDto.IdModelo,
                                      veiculoDto.AnoFabricacao,
                                      veiculoDto.ValorHora,
                                      veiculoDto.IdCategoria,
                                      veiculoDto.CapacidadePortaMalaLitros);
            if (veiculo.EhValido())
            {
                await _veiculoRepositorio.Inserir(veiculo);
                return Created(Url.Action(nameof(ObterPorId), new { id = veiculo.Id }), null);
            }
            else
                return BadRequest(veiculo.Mensagens);
        }

        /// <summary>
        /// Lista todos os veículos cadastrados no sistema que são de um dado modelo
        /// </summary>
        /// <param name="id">O ID do modelo a ser filtrado</param>
        /// <returns>Uma lista contendo todos os veículos deste modelo</returns>
        /// <response code="200">Lista retornada com sucesso</response>
        [ProducesResponseType(StatusCodes.Status200OK)]
        [HttpGet("modelo/{id}")]
        public async Task<ActionResult<Modelo>> ListarPorModelo(long id)
        {
            var veiculos = await _veiculoRepositorio.ListarPorModelo(id);
            return Ok(veiculos);
        }

        /// <summary>
        /// Lista todos as categorias de veículo cadastradas no sistema
        /// </summary>
        /// <returns>Uma lista contendo todos as categorias</returns>
        /// <response code="200">Lista retornada com sucesso</response>
        [ProducesResponseType(StatusCodes.Status200OK)]
        [HttpGet("categorias")]
        public async Task<ActionResult<Modelo>> ListarCategorias()
        {
            var veiculos = await _veiculoRepositorio.ListarCategorias();
            return Ok(veiculos);
        }

        /// <summary>
        /// Lista todos os veículos cadastrados no sistema que são de uma dada categoria
        /// </summary>
        /// <param name="id">O ID da categoria a ser filtrada</param>
        /// <returns>Uma lista contendo todos os veículos desta categoria</returns>
        /// <response code="200">Lista retornada com sucesso</response>
        [ProducesResponseType(StatusCodes.Status200OK)]
        [HttpGet("categoria/{id}")]
        public async Task<ActionResult<Modelo>> ListarPorCategoria(long id)
        {
            var veiculos = await _veiculoRepositorio.ListarPorCategoria(id);
            return Ok(veiculos);
        }
    }
}
